-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Tood\OneDrive - UTS\Uni\2021 Spring\Embedded Studio A\HDL CODER MATLAB\HDL Output with testbench\FFT_DUT\FFT_HDL_Optimized.vhd
-- Created: 2021-10-10 15:49:27
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FFT_HDL_Optimized
-- Source Path: FFT_DUT/HDL_DUT/FFT HDL Optimized
-- Hierarchy Level: 1
-- 
-- FFT HDL Optimized
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_DUT_pkg.ALL;

ENTITY FFT_HDL_Optimized IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    signed(15 DOWNTO 0);  -- int16
        dataIn_im                         :   IN    signed(15 DOWNTO 0);  -- int16
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   signed(18 DOWNTO 0);  -- sfix19
        dataOut_im                        :   OUT   signed(18 DOWNTO 0);  -- sfix19
        validOut                          :   OUT   std_logic
        );
END FFT_HDL_Optimized;


ARCHITECTURE rtl OF FFT_HDL_Optimized IS

  -- Component Declarations
  COMPONENT RADIX22FFT_CTRL1_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_1_1_vld                :   IN    std_logic;
          dinXTwdl_1_1_vld_1              :   IN    std_logic;
          rd_1_Addr                       :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
          rd_1_Enb                        :   OUT   std_logic;
          proc_1_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_1_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_1_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_1_vld_dly                   :   IN    std_logic;
          rd_1_Addr                       :   IN    unsigned(1 DOWNTO 0);  -- ufix2
          rd_1_Enb                        :   IN    std_logic;
          proc_1_enb                      :   IN    std_logic;
          dout_1_1_re                     :   OUT   signed(16 DOWNTO 0);  -- sfix17
          dout_1_1_im                     :   OUT   signed(16 DOWNTO 0);  -- sfix17
          dout_1_1_vld                    :   OUT   std_logic;
          dinXTwdl_1_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          dinXTwdl_2_1_vld                :   IN    std_logic;
          rd_2_Addr                       :   OUT   std_logic;  -- ufix1
          rd_2_Enb                        :   OUT   std_logic;
          proc_2_enb                      :   OUT   std_logic;
          multiply_2_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_1_1_re                     :   IN    signed(16 DOWNTO 0);  -- sfix17
          dout_1_1_im                     :   IN    signed(16 DOWNTO 0);  -- sfix17
          dout_1_1_vld                    :   IN    std_logic;
          rd_2_Addr                       :   IN    std_logic;  -- ufix1
          rd_2_Enb                        :   IN    std_logic;
          proc_2_enb                      :   IN    std_logic;
          multiply_2_J                    :   IN    std_logic;
          dout_2_1_re                     :   OUT   signed(17 DOWNTO 0);  -- sfix18
          dout_2_1_im                     :   OUT   signed(17 DOWNTO 0);  -- sfix18
          dout_2_1_vld                    :   OUT   std_logic;
          dinXTwdl_2_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_3_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_2_1_vld                    :   IN    std_logic;
          twdl_3_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_1_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_3_vld                  :   IN    std_logic;
          dinXTwdl_3_vld_1                :   IN    std_logic;
          rd_3_Addr                       :   OUT   std_logic;
          rd_3_Enb                        :   OUT   std_logic;
          proc_3_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_3_re_dly                    :   IN    signed(17 DOWNTO 0);  -- sfix18
          din_3_im_dly                    :   IN    signed(17 DOWNTO 0);  -- sfix18
          din_3_vld_dly                   :   IN    std_logic;
          rd_3_Addr                       :   IN    std_logic;
          rd_3_Enb_dly                    :   IN    std_logic;
          twdl_3_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_3_enb                      :   IN    std_logic;
          softReset                       :   IN    std_logic;
          dout_3_re                       :   OUT   signed(18 DOWNTO 0);  -- sfix19
          dout_3_im                       :   OUT   signed(18 DOWNTO 0);  -- sfix19
          dout_3_vld                      :   OUT   std_logic;
          dinXTwdl_3_vld                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX2FFT_bitNatural
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_3_re                       :   IN    signed(18 DOWNTO 0);  -- sfix19
          dout_3_im                       :   IN    signed(18 DOWNTO 0);  -- sfix19
          dout_3_vld                      :   IN    std_logic;
          dout_re1                        :   OUT   signed(18 DOWNTO 0);  -- sfix19
          dout_im1                        :   OUT   signed(18 DOWNTO 0);  -- sfix19
          dout_vld1                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : RADIX22FFT_CTRL1_1
    USE ENTITY work.RADIX22FFT_CTRL1_1(rtl);

  FOR ALL : RADIX22FFT_SDF1_1
    USE ENTITY work.RADIX22FFT_SDF1_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_2
    USE ENTITY work.RADIX22FFT_CTRL1_2(rtl);

  FOR ALL : RADIX22FFT_SDF2_2
    USE ENTITY work.RADIX22FFT_SDF2_2(rtl);

  FOR ALL : TWDLROM_3_1
    USE ENTITY work.TWDLROM_3_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_1_block
    USE ENTITY work.RADIX22FFT_CTRL1_1_block(rtl);

  FOR ALL : RADIX22FFT_SDF1_3
    USE ENTITY work.RADIX22FFT_SDF1_3(rtl);

  FOR ALL : RADIX2FFT_bitNatural
    USE ENTITY work.RADIX2FFT_bitNatural(rtl);

  -- Signals
  SIGNAL softReset                        : std_logic;
  SIGNAL dataIn_1_cast_re                 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dataIn_1_cast_im                 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg                     : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_1_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_1                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_1_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_2                   : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL din_1_vld_dly                    : std_logic;
  SIGNAL dinXTwdl_1_1_vld                 : std_logic;
  SIGNAL rd_1_Addr                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_1_Enb                         : std_logic;
  SIGNAL proc_1_enb                       : std_logic;
  SIGNAL dout_1_1_re                      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL dout_1_1_im                      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL dout_1_1_vld                     : std_logic;
  SIGNAL dinXTwdl_2_1_vld                 : std_logic;
  SIGNAL rd_2_Addr                        : std_logic;  -- ufix1
  SIGNAL rd_2_Enb                         : std_logic;
  SIGNAL proc_2_enb                       : std_logic;
  SIGNAL multiply_2_J                     : std_logic;
  SIGNAL dout_2_1_re                      : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL dout_2_1_im                      : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL dout_2_1_vld                     : std_logic;
  SIGNAL intdelay_reg_3                   : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL din_3_re_dly                     : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL intdelay_reg_4                   : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL din_3_im_dly                     : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL intdelay_reg_5                   : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL din_3_vld_dly                    : std_logic;
  SIGNAL twdl_3_re                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_3_im                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL rd_3_Enb                         : std_logic;
  SIGNAL rd_3_Enb_dly                     : std_logic;
  SIGNAL dinXTwdl_3_vld                   : std_logic;
  SIGNAL rd_3_Addr                        : std_logic;
  SIGNAL proc_3_enb                       : std_logic;
  SIGNAL dout_3_re                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL dout_3_im                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL dout_3_vld                       : std_logic;
  SIGNAL dout_re1                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL dout_im1                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL dout_vld1                        : std_logic;

BEGIN
  u_CTRL1_1_1 : RADIX22FFT_CTRL1_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld,
              dinXTwdl_1_1_vld_1 => dinXTwdl_1_1_vld,
              rd_1_Addr => rd_1_Addr,  -- ufix2
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb
              );

  u_SDF1_1_1 : RADIX22FFT_SDF1_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_1_1_re_dly => din_1_1_re_dly,  -- sfix16
              din_1_1_im_dly => din_1_1_im_dly,  -- sfix16
              din_1_vld_dly => din_1_vld_dly,
              rd_1_Addr => rd_1_Addr,  -- ufix2
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb,
              dout_1_1_re => dout_1_1_re,  -- sfix17
              dout_1_1_im => dout_1_1_im,  -- sfix17
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld
              );

  u_CTRL2_2_1 : RADIX22FFT_CTRL1_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix1
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J
              );

  u_SDF2_2_1 : RADIX22FFT_SDF2_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_1_1_re => dout_1_1_re,  -- sfix17
              dout_1_1_im => dout_1_1_im,  -- sfix17
              dout_1_1_vld => dout_1_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix1
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J,
              dout_2_1_re => dout_2_1_re,  -- sfix18
              dout_2_1_im => dout_2_1_im,  -- sfix18
              dout_2_1_vld => dout_2_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld
              );

  u_twdlROM_3 : TWDLROM_3_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_2_1_vld => dout_2_1_vld,
              twdl_3_re => twdl_3_re,  -- sfix16_En14
              twdl_3_im => twdl_3_im  -- sfix16_En14
              );

  u_CTRLRX2 : RADIX22FFT_CTRL1_1_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinXTwdl_3_vld => dinXTwdl_3_vld,
              dinXTwdl_3_vld_1 => dinXTwdl_3_vld,
              rd_3_Addr => rd_3_Addr,
              rd_3_Enb => rd_3_Enb,
              proc_3_enb => proc_3_enb
              );

  u_RADIX2 : RADIX22FFT_SDF1_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_3_re_dly => din_3_re_dly,  -- sfix18
              din_3_im_dly => din_3_im_dly,  -- sfix18
              din_3_vld_dly => din_3_vld_dly,
              rd_3_Addr => rd_3_Addr,
              rd_3_Enb_dly => rd_3_Enb_dly,
              twdl_3_re => twdl_3_re,  -- sfix16_En14
              twdl_3_im => twdl_3_im,  -- sfix16_En14
              proc_3_enb => proc_3_enb,
              softReset => softReset,
              dout_3_re => dout_3_re,  -- sfix19
              dout_3_im => dout_3_im,  -- sfix19
              dout_3_vld => dout_3_vld,
              dinXTwdl_3_vld => dinXTwdl_3_vld
              );

  u_NaturalOrder_Stage : RADIX2FFT_bitNatural
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_3_re => dout_3_re,  -- sfix19
              dout_3_im => dout_3_im,  -- sfix19
              dout_3_vld => dout_3_vld,
              dout_re1 => dout_re1,  -- sfix19
              dout_im1 => dout_im1,  -- sfix19
              dout_vld1 => dout_vld1
              );

  softReset <= '0';

  dataIn_1_cast_re <= dataIn_re;
  dataIn_1_cast_im <= dataIn_im;

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg(0) <= dataIn_1_cast_re;
          intdelay_reg(1 TO 2) <= intdelay_reg(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;

  din_1_1_re_dly <= intdelay_reg(2);

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_1(0) <= dataIn_1_cast_im;
          intdelay_reg_1(1 TO 2) <= intdelay_reg_1(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  din_1_1_im_dly <= intdelay_reg_1(2);

  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_2 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_2(0) <= validIn;
          intdelay_reg_2(1 TO 2) <= intdelay_reg_2(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;

  din_1_vld_dly <= intdelay_reg_2(2);

  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_3 <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_3 <= (OTHERS => to_signed(16#00000#, 18));
        ELSE 
          intdelay_reg_3(0) <= dout_2_1_re;
          intdelay_reg_3(1 TO 2) <= intdelay_reg_3(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;

  din_3_re_dly <= intdelay_reg_3(2);

  intdelay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_4 <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_4 <= (OTHERS => to_signed(16#00000#, 18));
        ELSE 
          intdelay_reg_4(0) <= dout_2_1_im;
          intdelay_reg_4(1 TO 2) <= intdelay_reg_4(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;

  din_3_im_dly <= intdelay_reg_4(2);

  intdelay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_5 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_5 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_5(0) <= dout_2_1_vld;
          intdelay_reg_5(1 TO 2) <= intdelay_reg_5(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;

  din_3_vld_dly <= intdelay_reg_5(2);

  intdelay_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_3_Enb_dly <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          rd_3_Enb_dly <= '0';
        ELSE 
          rd_3_Enb_dly <= rd_3_Enb;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  dataOut_re <= dout_re1;

  dataOut_im <= dout_im1;

  validOut <= dout_vld1;

END rtl;

